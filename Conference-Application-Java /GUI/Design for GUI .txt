1. MVP design pattern: I chose to use MVP because it is a very common \n
design pattern for GUI. It separates the underlying program (Model) \n
from the UI (View) and uses the Presenter Class (in this case serves \n
as both controller and presenter class) to communicate between them. \n
2. Builder Design pattern: One of the UI classes is PopupWindow, this \n
class can build a popup window with any number of buttons and texts as \n
you like by calling its method like setTitle, addButton… \n
3. Facade Design pattern: The Model class is a collection of Controller \n
classes we need, this encapsulates the code that interacts with Presenter class. \n
4. Dependency Injection: we eliminate unnecessary dependencies by using \n
interfaces such as IPresenter, IModel and IViewUsers, now the classes are \n
not dependent on each other when they need to use methods from outside. \n